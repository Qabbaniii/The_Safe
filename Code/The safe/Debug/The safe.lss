
The safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000ad0  00000b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000c8  008000c8  00000bcc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00001320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa4  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004bb  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ef  00000000  00000000  0000287f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00003070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb1  00000000  00000000  000037a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 ec       	ldi	r26, 0xC8	; 200
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 41 04 	call	0x882	; 0x882 <main>
  8a:	0c 94 66 05 	jmp	0xacc	; 0xacc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vSetPortDirection>:
	   case DIO_u8_PORTC: DDRC = 0x00; break;
	   case DIO_u8_PORTD: DDRD = 0x00; break;
	}}break;


}}}
  92:	08 95       	ret

00000094 <DIO_vSetPortValue>:
void DIO_vSetPortValue (u8 copy_u8PortName,u8 copy_u8Value         ){
	switch(copy_u8PortName){
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	49 f0       	breq	.+18     	; 0xaa <DIO_vSetPortValue+0x16>
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_vSetPortValue+0x12>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	39 f0       	breq	.+14     	; 0xae <DIO_vSetPortValue+0x1a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	41 f4       	brne	.+16     	; 0xb4 <DIO_vSetPortValue+0x20>
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <DIO_vSetPortValue+0x1e>
			default:break;
			case DIO_u8_PORTA: PORTA = copy_u8Value; break;
  a6:	6b bb       	out	0x1b, r22	; 27
  a8:	08 95       	ret
			case DIO_u8_PORTB: PORTB = copy_u8Value; break;
  aa:	68 bb       	out	0x18, r22	; 24
  ac:	08 95       	ret
			case DIO_u8_PORTC: PORTC = copy_u8Value; break;
  ae:	65 bb       	out	0x15, r22	; 21
  b0:	08 95       	ret
			case DIO_u8_PORTD: PORTD = copy_u8Value; break;
  b2:	62 bb       	out	0x12, r22	; 18
  b4:	08 95       	ret

000000b6 <DIO_u8GetPortValue>:
	}
}
u8 DIO_u8GetPortValue (u8 copy_u8PortName                                 ){
	u8 LOC_u8Value = 0;
	switch(copy_u8PortName){
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	49 f0       	breq	.+18     	; 0xcc <DIO_u8GetPortValue+0x16>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	28 f0       	brcs	.+10     	; 0xc8 <DIO_u8GetPortValue+0x12>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	39 f0       	breq	.+14     	; 0xd0 <DIO_u8GetPortValue+0x1a>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	49 f4       	brne	.+18     	; 0xd8 <DIO_u8GetPortValue+0x22>
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <DIO_u8GetPortValue+0x1e>
				default:break;
				case DIO_u8_PORTA: LOC_u8Value = PORTA; break;
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	08 95       	ret
				case DIO_u8_PORTB: LOC_u8Value = PORTB; break;
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	08 95       	ret
				case DIO_u8_PORTC: LOC_u8Value = PORTC; break;
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	08 95       	ret
				case DIO_u8_PORTD: LOC_u8Value = PORTD; break;}
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	08 95       	ret
			case DIO_u8_PORTC: PORTC = copy_u8Value; break;
			case DIO_u8_PORTD: PORTD = copy_u8Value; break;
	}
}
u8 DIO_u8GetPortValue (u8 copy_u8PortName                                 ){
	u8 LOC_u8Value = 0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
				case DIO_u8_PORTA: LOC_u8Value = PORTA; break;
				case DIO_u8_PORTB: LOC_u8Value = PORTB; break;
				case DIO_u8_PORTC: LOC_u8Value = PORTC; break;
				case DIO_u8_PORTD: LOC_u8Value = PORTD; break;}
				return LOC_u8Value;
}
  da:	08 95       	ret

000000dc <DIO_vSetPinDirection>:


void DIO_vSetPinDirection (u8 copy_u8PortName,u8 copy_u8PinNumber,u8 copy_u8Direction){
	switch (copy_u8Direction){
  dc:	44 23       	and	r20, r20
  de:	21 f0       	breq	.+8      	; 0xe8 <DIO_vSetPinDirection+0xc>
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	09 f0       	breq	.+2      	; 0xe6 <DIO_vSetPinDirection+0xa>
  e4:	7f c0       	rjmp	.+254    	; 0x1e4 <DIO_vSetPinDirection+0x108>
  e6:	42 c0       	rjmp	.+132    	; 0x16c <DIO_vSetPinDirection+0x90>
		default : break;
		case DIO_u8_PORT_INPUT : {
			switch(copy_u8PortName){
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	b1 f0       	breq	.+44     	; 0x118 <DIO_vSetPinDirection+0x3c>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	30 f0       	brcs	.+12     	; 0xfc <DIO_vSetPinDirection+0x20>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	01 f1       	breq	.+64     	; 0x134 <DIO_vSetPinDirection+0x58>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	09 f0       	breq	.+2      	; 0xfa <DIO_vSetPinDirection+0x1e>
  f8:	75 c0       	rjmp	.+234    	; 0x1e4 <DIO_vSetPinDirection+0x108>
  fa:	2a c0       	rjmp	.+84     	; 0x150 <DIO_vSetPinDirection+0x74>
			default:break;
			case DIO_u8_PORTA: CLR_BIT(DDRA,copy_u8PinNumber); break;
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	ac 01       	movw	r20, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_vSetPinDirection+0x2e>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_vSetPinDirection+0x2a>
 10e:	ba 01       	movw	r22, r20
 110:	60 95       	com	r22
 112:	62 23       	and	r22, r18
 114:	6a bb       	out	0x1a, r22	; 26
 116:	08 95       	ret
			case DIO_u8_PORTB: CLR_BIT(DDRB,copy_u8PinNumber); break;
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ac 01       	movw	r20, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_vSetPinDirection+0x4a>
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_vSetPinDirection+0x46>
 12a:	ba 01       	movw	r22, r20
 12c:	60 95       	com	r22
 12e:	62 23       	and	r22, r18
 130:	67 bb       	out	0x17, r22	; 23
 132:	08 95       	ret
			case DIO_u8_PORTC: CLR_BIT(DDRC,copy_u8PinNumber); break;
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	ac 01       	movw	r20, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_vSetPinDirection+0x66>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_vSetPinDirection+0x62>
 146:	ba 01       	movw	r22, r20
 148:	60 95       	com	r22
 14a:	62 23       	and	r22, r18
 14c:	64 bb       	out	0x14, r22	; 20
 14e:	08 95       	ret
			case DIO_u8_PORTD: CLR_BIT(DDRD,copy_u8PinNumber); break;
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ac 01       	movw	r20, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_vSetPinDirection+0x82>
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_vSetPinDirection+0x7e>
 162:	ba 01       	movw	r22, r20
 164:	60 95       	com	r22
 166:	62 23       	and	r22, r18
 168:	61 bb       	out	0x11, r22	; 17
 16a:	08 95       	ret

			}}break;
		case DIO_u8_PORT_OUTPUT: {
			switch(copy_u8PortName){
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	a1 f0       	breq	.+40     	; 0x198 <DIO_vSetPinDirection+0xbc>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_vSetPinDirection+0xa2>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	e9 f0       	breq	.+58     	; 0x1b2 <DIO_vSetPinDirection+0xd6>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	a1 f5       	brne	.+104    	; 0x1e4 <DIO_vSetPinDirection+0x108>
 17c:	27 c0       	rjmp	.+78     	; 0x1cc <DIO_vSetPinDirection+0xf0>
			default:break;
			case DIO_u8_PORTA: SET_BIT(DDRA,copy_u8PinNumber); break;
 17e:	2a b3       	in	r18, 0x1a	; 26
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vSetPinDirection+0xb0>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vSetPinDirection+0xac>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	6a bb       	out	0x1a, r22	; 26
 196:	08 95       	ret
			case DIO_u8_PORTB: SET_BIT(DDRB,copy_u8PinNumber); break;
 198:	27 b3       	in	r18, 0x17	; 23
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vSetPinDirection+0xca>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vSetPinDirection+0xc6>
 1aa:	ba 01       	movw	r22, r20
 1ac:	62 2b       	or	r22, r18
 1ae:	67 bb       	out	0x17, r22	; 23
 1b0:	08 95       	ret
			case DIO_u8_PORTC: SET_BIT(DDRC,copy_u8PinNumber); break;
 1b2:	24 b3       	in	r18, 0x14	; 20
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	ac 01       	movw	r20, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_vSetPinDirection+0xe4>
 1bc:	44 0f       	add	r20, r20
 1be:	55 1f       	adc	r21, r21
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_vSetPinDirection+0xe0>
 1c4:	ba 01       	movw	r22, r20
 1c6:	62 2b       	or	r22, r18
 1c8:	64 bb       	out	0x14, r22	; 20
 1ca:	08 95       	ret
			case DIO_u8_PORTD: SET_BIT(DDRD,copy_u8PinNumber); break;
 1cc:	21 b3       	in	r18, 0x11	; 17
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ac 01       	movw	r20, r24
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_vSetPinDirection+0xfe>
 1d6:	44 0f       	add	r20, r20
 1d8:	55 1f       	adc	r21, r21
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_vSetPinDirection+0xfa>
 1de:	ba 01       	movw	r22, r20
 1e0:	62 2b       	or	r22, r18
 1e2:	61 bb       	out	0x11, r22	; 17
 1e4:	08 95       	ret

000001e6 <DIO_vSetPinValue>:


	}
}
void DIO_vSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8Value		){
	switch (Copy_u8Value){
 1e6:	44 23       	and	r20, r20
 1e8:	09 f4       	brne	.+2      	; 0x1ec <DIO_vSetPinValue+0x6>
 1ea:	41 c0       	rjmp	.+130    	; 0x26e <DIO_vSetPinValue+0x88>
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_vSetPinValue+0xc>
 1f0:	7e c0       	rjmp	.+252    	; 0x2ee <DIO_vSetPinValue+0x108>
	default : break;

	case DIO_u8_PIN_HIGH:{
		switch (Copy_u8PortName){
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	a9 f0       	breq	.+42     	; 0x220 <DIO_vSetPinValue+0x3a>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	30 f0       	brcs	.+12     	; 0x206 <DIO_vSetPinValue+0x20>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	f1 f0       	breq	.+60     	; 0x23a <DIO_vSetPinValue+0x54>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	09 f0       	breq	.+2      	; 0x204 <DIO_vSetPinValue+0x1e>
 202:	75 c0       	rjmp	.+234    	; 0x2ee <DIO_vSetPinValue+0x108>
 204:	27 c0       	rjmp	.+78     	; 0x254 <DIO_vSetPinValue+0x6e>
		default :break;
		case DIO_u8_PORTA: SET_BIT(PORTA, Copy_u8PinNumber);	break;
 206:	2b b3       	in	r18, 0x1b	; 27
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ac 01       	movw	r20, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vSetPinValue+0x2e>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vSetPinValue+0x2a>
 218:	ba 01       	movw	r22, r20
 21a:	62 2b       	or	r22, r18
 21c:	6b bb       	out	0x1b, r22	; 27
 21e:	08 95       	ret
		case DIO_u8_PORTB: SET_BIT(PORTB, Copy_u8PinNumber);	break;
 220:	28 b3       	in	r18, 0x18	; 24
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_vSetPinValue+0x48>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_vSetPinValue+0x44>
 232:	ba 01       	movw	r22, r20
 234:	62 2b       	or	r22, r18
 236:	68 bb       	out	0x18, r22	; 24
 238:	08 95       	ret
		case DIO_u8_PORTC: SET_BIT(PORTC, Copy_u8PinNumber);	break;
 23a:	25 b3       	in	r18, 0x15	; 21
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_vSetPinValue+0x62>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_vSetPinValue+0x5e>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	65 bb       	out	0x15, r22	; 21
 252:	08 95       	ret
		case DIO_u8_PORTD: SET_BIT(PORTD, Copy_u8PinNumber);	break;
 254:	22 b3       	in	r18, 0x12	; 18
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_vSetPinValue+0x7c>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_vSetPinValue+0x78>
 266:	ba 01       	movw	r22, r20
 268:	62 2b       	or	r22, r18
 26a:	62 bb       	out	0x12, r22	; 18
 26c:	08 95       	ret
		}
	}break;


	case DIO_u8_PIN_LOW:{
		switch (Copy_u8PortName){
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	a9 f0       	breq	.+42     	; 0x29c <DIO_vSetPinValue+0xb6>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	28 f0       	brcs	.+10     	; 0x280 <DIO_vSetPinValue+0x9a>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	f9 f0       	breq	.+62     	; 0x2b8 <DIO_vSetPinValue+0xd2>
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	c1 f5       	brne	.+112    	; 0x2ee <DIO_vSetPinValue+0x108>
 27e:	2a c0       	rjmp	.+84     	; 0x2d4 <DIO_vSetPinValue+0xee>
		default :break;
		case DIO_u8_PORTA: CLR_BIT(PORTA, Copy_u8PinNumber);	break;
 280:	2b b3       	in	r18, 0x1b	; 27
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vSetPinValue+0xa8>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vSetPinValue+0xa4>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	6b bb       	out	0x1b, r22	; 27
 29a:	08 95       	ret
		case DIO_u8_PORTB: CLR_BIT(PORTB, Copy_u8PinNumber);	break;
 29c:	28 b3       	in	r18, 0x18	; 24
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	ac 01       	movw	r20, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_vSetPinValue+0xc4>
 2a6:	44 0f       	add	r20, r20
 2a8:	55 1f       	adc	r21, r21
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_vSetPinValue+0xc0>
 2ae:	ba 01       	movw	r22, r20
 2b0:	60 95       	com	r22
 2b2:	62 23       	and	r22, r18
 2b4:	68 bb       	out	0x18, r22	; 24
 2b6:	08 95       	ret
		case DIO_u8_PORTC: CLR_BIT(PORTC, Copy_u8PinNumber);	break;
 2b8:	25 b3       	in	r18, 0x15	; 21
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ac 01       	movw	r20, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_vSetPinValue+0xe0>
 2c2:	44 0f       	add	r20, r20
 2c4:	55 1f       	adc	r21, r21
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_vSetPinValue+0xdc>
 2ca:	ba 01       	movw	r22, r20
 2cc:	60 95       	com	r22
 2ce:	62 23       	and	r22, r18
 2d0:	65 bb       	out	0x15, r22	; 21
 2d2:	08 95       	ret
		case DIO_u8_PORTD: CLR_BIT(PORTD, Copy_u8PinNumber);	break;
 2d4:	22 b3       	in	r18, 0x12	; 18
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_vSetPinValue+0xfc>
 2de:	44 0f       	add	r20, r20
 2e0:	55 1f       	adc	r21, r21
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_vSetPinValue+0xf8>
 2e6:	ba 01       	movw	r22, r20
 2e8:	60 95       	com	r22
 2ea:	62 23       	and	r22, r18
 2ec:	62 bb       	out	0x12, r22	; 18
 2ee:	08 95       	ret

000002f0 <DIO_u8GetPinValue>:
}

u8 DIO_u8GetPinValue (u8 copy_u8PortName,u8 copy_u8PinNumber                                ){

	u8 LOC_u8Value = 0;
		switch(copy_u8PortName){
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	89 f0       	breq	.+34     	; 0x316 <DIO_u8GetPinValue+0x26>
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	28 f0       	brcs	.+10     	; 0x302 <DIO_u8GetPinValue+0x12>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	b9 f0       	breq	.+46     	; 0x32a <DIO_u8GetPinValue+0x3a>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	49 f5       	brne	.+82     	; 0x352 <DIO_u8GetPinValue+0x62>
 300:	1e c0       	rjmp	.+60     	; 0x33e <DIO_u8GetPinValue+0x4e>
					default:break;
					case DIO_u8_PORTA: LOC_u8Value = GET_BIT(PINA,copy_u8PinNumber); break;
 302:	29 b3       	in	r18, 0x19	; 25
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	c9 01       	movw	r24, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_u8GetPinValue+0x1e>
 30a:	95 95       	asr	r25
 30c:	87 95       	ror	r24
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_u8GetPinValue+0x1a>
 312:	81 70       	andi	r24, 0x01	; 1
 314:	08 95       	ret
					case DIO_u8_PORTB: LOC_u8Value = GET_BIT(PINB,copy_u8PinNumber); break;
 316:	26 b3       	in	r18, 0x16	; 22
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	c9 01       	movw	r24, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_u8GetPinValue+0x32>
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_u8GetPinValue+0x2e>
 326:	81 70       	andi	r24, 0x01	; 1
 328:	08 95       	ret
					case DIO_u8_PORTC: LOC_u8Value = GET_BIT(PINC,copy_u8PinNumber); break;
 32a:	23 b3       	in	r18, 0x13	; 19
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	c9 01       	movw	r24, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_u8GetPinValue+0x46>
 332:	95 95       	asr	r25
 334:	87 95       	ror	r24
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_u8GetPinValue+0x42>
 33a:	81 70       	andi	r24, 0x01	; 1
 33c:	08 95       	ret
					case DIO_u8_PORTD: LOC_u8Value = GET_BIT(PIND,copy_u8PinNumber); break;
 33e:	20 b3       	in	r18, 0x10	; 16
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	c9 01       	movw	r24, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_u8GetPinValue+0x5a>
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_u8GetPinValue+0x56>
 34e:	81 70       	andi	r24, 0x01	; 1
 350:	08 95       	ret
	}
}

u8 DIO_u8GetPinValue (u8 copy_u8PortName,u8 copy_u8PinNumber                                ){

	u8 LOC_u8Value = 0;
 352:	80 e0       	ldi	r24, 0x00	; 0
					case DIO_u8_PORTB: LOC_u8Value = GET_BIT(PINB,copy_u8PinNumber); break;
					case DIO_u8_PORTC: LOC_u8Value = GET_BIT(PINC,copy_u8PinNumber); break;
					case DIO_u8_PORTD: LOC_u8Value = GET_BIT(PIND,copy_u8PinNumber); break;
					}
					return LOC_u8Value;
}
 354:	08 95       	ret

00000356 <DIO_vTogglePin>:

void DIO_vTogglePin(u8 copy_u8PortName,u8 copy_u8PinNumber){
	switch(copy_u8PortName){
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	a1 f0       	breq	.+40     	; 0x382 <DIO_vTogglePin+0x2c>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	28 f0       	brcs	.+10     	; 0x368 <DIO_vTogglePin+0x12>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	e9 f0       	breq	.+58     	; 0x39c <DIO_vTogglePin+0x46>
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	a1 f5       	brne	.+104    	; 0x3ce <DIO_vTogglePin+0x78>
 366:	27 c0       	rjmp	.+78     	; 0x3b6 <DIO_vTogglePin+0x60>
						default:break;
						case DIO_u8_PORTA: TOG_BIT(PORTA,copy_u8PinNumber); break;
 368:	2b b3       	in	r18, 0x1b	; 27
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_vTogglePin+0x20>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_vTogglePin+0x1c>
 37a:	ba 01       	movw	r22, r20
 37c:	62 27       	eor	r22, r18
 37e:	6b bb       	out	0x1b, r22	; 27
 380:	08 95       	ret
						case DIO_u8_PORTB: TOG_BIT(PORTB,copy_u8PinNumber); break;
 382:	28 b3       	in	r18, 0x18	; 24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_vTogglePin+0x3a>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_vTogglePin+0x36>
 394:	ba 01       	movw	r22, r20
 396:	62 27       	eor	r22, r18
 398:	68 bb       	out	0x18, r22	; 24
 39a:	08 95       	ret
						case DIO_u8_PORTC: TOG_BIT(PORTC,copy_u8PinNumber); break;
 39c:	25 b3       	in	r18, 0x15	; 21
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_vTogglePin+0x54>
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_vTogglePin+0x50>
 3ae:	ba 01       	movw	r22, r20
 3b0:	62 27       	eor	r22, r18
 3b2:	65 bb       	out	0x15, r22	; 21
 3b4:	08 95       	ret
						case DIO_u8_PORTD: TOG_BIT(PORTD,copy_u8PinNumber); break;
 3b6:	22 b3       	in	r18, 0x12	; 18
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	ac 01       	movw	r20, r24
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_vTogglePin+0x6e>
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_vTogglePin+0x6a>
 3c8:	ba 01       	movw	r22, r20
 3ca:	62 27       	eor	r22, r18
 3cc:	62 bb       	out	0x12, r22	; 18
 3ce:	08 95       	ret

000003d0 <DIO_vPullUpEnable>:

void DIO_vPullUpEnable (u8 copy_u8PortName,u8 copy_u8PinNumber,u8 copy_u8Enable)
{
	// default of PUD is 0
	
	switch (copy_u8Enable){
 3d0:	44 23       	and	r20, r20
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <DIO_vPullUpEnable+0x6>
 3d4:	41 c0       	rjmp	.+130    	; 0x458 <DIO_vPullUpEnable+0x88>
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <DIO_vPullUpEnable+0xc>
 3da:	7e c0       	rjmp	.+252    	; 0x4d8 <DIO_vPullUpEnable+0x108>
		default : break;
			case DIO_u8_PIN_ENABLE: {
				switch(copy_u8PortName){
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	a9 f0       	breq	.+42     	; 0x40a <DIO_vPullUpEnable+0x3a>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	30 f0       	brcs	.+12     	; 0x3f0 <DIO_vPullUpEnable+0x20>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	f1 f0       	breq	.+60     	; 0x424 <DIO_vPullUpEnable+0x54>
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	09 f0       	breq	.+2      	; 0x3ee <DIO_vPullUpEnable+0x1e>
 3ec:	75 c0       	rjmp	.+234    	; 0x4d8 <DIO_vPullUpEnable+0x108>
 3ee:	27 c0       	rjmp	.+78     	; 0x43e <DIO_vPullUpEnable+0x6e>
					default:break;
					case DIO_u8_PORTA: SET_BIT(PORTA,copy_u8PinNumber); break;
 3f0:	2b b3       	in	r18, 0x1b	; 27
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	ac 01       	movw	r20, r24
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_vPullUpEnable+0x2e>
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_vPullUpEnable+0x2a>
 402:	ba 01       	movw	r22, r20
 404:	62 2b       	or	r22, r18
 406:	6b bb       	out	0x1b, r22	; 27
 408:	08 95       	ret
					case DIO_u8_PORTB: SET_BIT(PORTB,copy_u8PinNumber); break;
 40a:	28 b3       	in	r18, 0x18	; 24
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	ac 01       	movw	r20, r24
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_vPullUpEnable+0x48>
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_vPullUpEnable+0x44>
 41c:	ba 01       	movw	r22, r20
 41e:	62 2b       	or	r22, r18
 420:	68 bb       	out	0x18, r22	; 24
 422:	08 95       	ret
					case DIO_u8_PORTC: SET_BIT(PORTC,copy_u8PinNumber); break;
 424:	25 b3       	in	r18, 0x15	; 21
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	ac 01       	movw	r20, r24
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_vPullUpEnable+0x62>
 42e:	44 0f       	add	r20, r20
 430:	55 1f       	adc	r21, r21
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_vPullUpEnable+0x5e>
 436:	ba 01       	movw	r22, r20
 438:	62 2b       	or	r22, r18
 43a:	65 bb       	out	0x15, r22	; 21
 43c:	08 95       	ret
					case DIO_u8_PORTD: SET_BIT(PORTD,copy_u8PinNumber); break;
 43e:	22 b3       	in	r18, 0x12	; 18
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	ac 01       	movw	r20, r24
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_vPullUpEnable+0x7c>
 448:	44 0f       	add	r20, r20
 44a:	55 1f       	adc	r21, r21
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_vPullUpEnable+0x78>
 450:	ba 01       	movw	r22, r20
 452:	62 2b       	or	r22, r18
 454:	62 bb       	out	0x12, r22	; 18
 456:	08 95       	ret
				}}break;
			case DIO_u8_PIN_DISABLE: {
				switch(copy_u8PortName){
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	a9 f0       	breq	.+42     	; 0x486 <DIO_vPullUpEnable+0xb6>
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	28 f0       	brcs	.+10     	; 0x46a <DIO_vPullUpEnable+0x9a>
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	f9 f0       	breq	.+62     	; 0x4a2 <DIO_vPullUpEnable+0xd2>
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	c1 f5       	brne	.+112    	; 0x4d8 <DIO_vPullUpEnable+0x108>
 468:	2a c0       	rjmp	.+84     	; 0x4be <DIO_vPullUpEnable+0xee>
					default:break;
					case DIO_u8_PORTA: CLR_BIT(PORTA,copy_u8PinNumber); break;
 46a:	2b b3       	in	r18, 0x1b	; 27
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	ac 01       	movw	r20, r24
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_vPullUpEnable+0xa8>
 474:	44 0f       	add	r20, r20
 476:	55 1f       	adc	r21, r21
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_vPullUpEnable+0xa4>
 47c:	ba 01       	movw	r22, r20
 47e:	60 95       	com	r22
 480:	62 23       	and	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
					case DIO_u8_PORTB: CLR_BIT(PORTB,copy_u8PinNumber); break;
 486:	28 b3       	in	r18, 0x18	; 24
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vPullUpEnable+0xc4>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vPullUpEnable+0xc0>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	68 bb       	out	0x18, r22	; 24
 4a0:	08 95       	ret
					case DIO_u8_PORTC: CLR_BIT(PORTC,copy_u8PinNumber); break;						
 4a2:	25 b3       	in	r18, 0x15	; 21
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_vPullUpEnable+0xe0>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_vPullUpEnable+0xdc>
 4b4:	ba 01       	movw	r22, r20
 4b6:	60 95       	com	r22
 4b8:	62 23       	and	r22, r18
 4ba:	65 bb       	out	0x15, r22	; 21
 4bc:	08 95       	ret
					case DIO_u8_PORTD: CLR_BIT(PORTD,copy_u8PinNumber); break;
 4be:	22 b3       	in	r18, 0x12	; 18
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	ac 01       	movw	r20, r24
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_vPullUpEnable+0xfc>
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_vPullUpEnable+0xf8>
 4d0:	ba 01       	movw	r22, r20
 4d2:	60 95       	com	r22
 4d4:	62 23       	and	r22, r18
 4d6:	62 bb       	out	0x12, r22	; 18
 4d8:	08 95       	ret

000004da <DIO_vSetLowNibblePullUpEnable>:
				}}break;
			}
		}

void DIO_vSetLowNibblePullUpEnable (u8 copy_u8PortName,u8 copy_u8Enable)
{
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	d8 2f       	mov	r29, r24
 4e0:	c6 2f       	mov	r28, r22
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN0,copy_u8Enable);
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	4c 2f       	mov	r20, r28
 4e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN1,copy_u8Enable);
 4ea:	8d 2f       	mov	r24, r29
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	4c 2f       	mov	r20, r28
 4f0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN2,copy_u8Enable);
 4f4:	8d 2f       	mov	r24, r29
 4f6:	62 e0       	ldi	r22, 0x02	; 2
 4f8:	4c 2f       	mov	r20, r28
 4fa:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN3,copy_u8Enable);
 4fe:	8d 2f       	mov	r24, r29
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	4c 2f       	mov	r20, r28
 504:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
}
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <DIO_vSetHighNibblePullUpEnable>:

void DIO_vSetHighNibblePullUpEnable (u8 copy_u8PortName,u8 copy_u8Enable)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	d8 2f       	mov	r29, r24
 514:	c6 2f       	mov	r28, r22
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN4,copy_u8Enable);
 516:	64 e0       	ldi	r22, 0x04	; 4
 518:	4c 2f       	mov	r20, r28
 51a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN5,copy_u8Enable);
 51e:	8d 2f       	mov	r24, r29
 520:	65 e0       	ldi	r22, 0x05	; 5
 522:	4c 2f       	mov	r20, r28
 524:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN6,copy_u8Enable);
 528:	8d 2f       	mov	r24, r29
 52a:	66 e0       	ldi	r22, 0x06	; 6
 52c:	4c 2f       	mov	r20, r28
 52e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
	DIO_vPullUpEnable(copy_u8PortName,DIO_u8_PIN7,copy_u8Enable);
 532:	8d 2f       	mov	r24, r29
 534:	67 e0       	ldi	r22, 0x07	; 7
 536:	4c 2f       	mov	r20, r28
 538:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <DIO_vPullUpEnable>
}
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <DIO_vSetLowNibbleValue>:

void DIO_vSetLowNibbleValue(u8 copy_u8PortName,u8 Copy_u8Value)
{
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	c8 2f       	mov	r28, r24
 548:	d6 2f       	mov	r29, r22
	
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN0,GET_BIT(Copy_u8Value,0));
 54a:	46 2f       	mov	r20, r22
 54c:	41 70       	andi	r20, 0x01	; 1
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN1,GET_BIT(Copy_u8Value,1));
 554:	4d 2f       	mov	r20, r29
 556:	46 95       	lsr	r20
 558:	41 70       	andi	r20, 0x01	; 1
 55a:	8c 2f       	mov	r24, r28
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN2,GET_BIT(Copy_u8Value,2));
 562:	4d 2f       	mov	r20, r29
 564:	46 95       	lsr	r20
 566:	46 95       	lsr	r20
 568:	41 70       	andi	r20, 0x01	; 1
 56a:	8c 2f       	mov	r24, r28
 56c:	62 e0       	ldi	r22, 0x02	; 2
 56e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN3,GET_BIT(Copy_u8Value,3));
 572:	d6 95       	lsr	r29
 574:	d6 95       	lsr	r29
 576:	d6 95       	lsr	r29
 578:	4d 2f       	mov	r20, r29
 57a:	41 70       	andi	r20, 0x01	; 1
 57c:	8c 2f       	mov	r24, r28
 57e:	63 e0       	ldi	r22, 0x03	; 3
 580:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <DIO_vSetHighNibbleValue>:

void DIO_vSetHighNibbleValue(u8 copy_u8PortName,u8 Copy_u8Value)
{
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	c8 2f       	mov	r28, r24
	Copy_u8Value<<=4;
	
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN4,GET_BIT(Copy_u8Value,4));
 590:	d6 2f       	mov	r29, r22
 592:	d2 95       	swap	r29
 594:	d0 7f       	andi	r29, 0xF0	; 240
 596:	46 2f       	mov	r20, r22
 598:	41 70       	andi	r20, 0x01	; 1
 59a:	64 e0       	ldi	r22, 0x04	; 4
 59c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN5,GET_BIT(Copy_u8Value,5));
 5a0:	4d 2f       	mov	r20, r29
 5a2:	42 95       	swap	r20
 5a4:	46 95       	lsr	r20
 5a6:	47 70       	andi	r20, 0x07	; 7
 5a8:	41 70       	andi	r20, 0x01	; 1
 5aa:	8c 2f       	mov	r24, r28
 5ac:	65 e0       	ldi	r22, 0x05	; 5
 5ae:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN6,GET_BIT(Copy_u8Value,6));
 5b2:	4d 2f       	mov	r20, r29
 5b4:	42 95       	swap	r20
 5b6:	46 95       	lsr	r20
 5b8:	46 95       	lsr	r20
 5ba:	43 70       	andi	r20, 0x03	; 3
 5bc:	41 70       	andi	r20, 0x01	; 1
 5be:	8c 2f       	mov	r24, r28
 5c0:	66 e0       	ldi	r22, 0x06	; 6
 5c2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	DIO_vSetPinValue(copy_u8PortName,DIO_u8_PIN7,GET_BIT(Copy_u8Value,7));
 5c6:	4d 2f       	mov	r20, r29
 5c8:	44 1f       	adc	r20, r20
 5ca:	44 27       	eor	r20, r20
 5cc:	44 1f       	adc	r20, r20
 5ce:	8c 2f       	mov	r24, r28
 5d0:	67 e0       	ldi	r22, 0x07	; 7
 5d2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
}
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <DIO_vSetLowNibbleDirection>:

void DIO_vSetLowNibbleDirection(u8 copy_u8PortName,u8 copy_u8Direction)
{
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	d8 2f       	mov	r29, r24
 5e2:	c6 2f       	mov	r28, r22
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN0,copy_u8Direction);
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	4c 2f       	mov	r20, r28
 5e8:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN1,copy_u8Direction);
 5ec:	8d 2f       	mov	r24, r29
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	4c 2f       	mov	r20, r28
 5f2:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN2,copy_u8Direction);
 5f6:	8d 2f       	mov	r24, r29
 5f8:	62 e0       	ldi	r22, 0x02	; 2
 5fa:	4c 2f       	mov	r20, r28
 5fc:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN3,copy_u8Direction);
 600:	8d 2f       	mov	r24, r29
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	4c 2f       	mov	r20, r28
 606:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
}
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <DIO_vSetHighNibbleDirection>:

void DIO_vSetHighNibbleDirection(u8 copy_u8PortName,u8 copy_u8Direction)
{
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	d8 2f       	mov	r29, r24
 616:	c6 2f       	mov	r28, r22
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN4,copy_u8Direction);
 618:	64 e0       	ldi	r22, 0x04	; 4
 61a:	4c 2f       	mov	r20, r28
 61c:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN5,copy_u8Direction);
 620:	8d 2f       	mov	r24, r29
 622:	65 e0       	ldi	r22, 0x05	; 5
 624:	4c 2f       	mov	r20, r28
 626:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN6,copy_u8Direction);
 62a:	8d 2f       	mov	r24, r29
 62c:	66 e0       	ldi	r22, 0x06	; 6
 62e:	4c 2f       	mov	r20, r28
 630:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(copy_u8PortName,DIO_u8_PIN7,copy_u8Direction);
 634:	8d 2f       	mov	r24, r29
 636:	67 e0       	ldi	r22, 0x07	; 7
 638:	4c 2f       	mov	r20, r28
 63a:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	08 95       	ret

00000644 <EEPROM_vWrite>:


void EEPROM_vWrite(const u16 copy_u16Address,u8 copy_u8Data){
	
	/*Setup address Register*/
	EEARL =(char)copy_u16Address;
 644:	8e bb       	out	0x1e, r24	; 30
	EEARH =(char)(copy_u16Address>>8);
 646:	9f bb       	out	0x1f, r25	; 31
	
	/*Setup data Register*/
	EEDR =copy_u8Data;
 648:	6d bb       	out	0x1d, r22	; 29
	
	/*write logic one to EEMWE*/
	SET_BIT(EECR,EEMWE);
 64a:	e2 9a       	sbi	0x1c, 2	; 28
	/*write logic one to EEWE*/
	SET_BIT(EECR,EEWE);
 64c:	e1 9a       	sbi	0x1c, 1	; 28
	
	/*wait for completion of write operation*/
	while(GET_BIT(EECR,EEWE)==1);
 64e:	8c b3       	in	r24, 0x1c	; 28
 650:	81 fd       	sbrc	r24, 1
 652:	fd cf       	rjmp	.-6      	; 0x64e <EEPROM_vWrite+0xa>
	
}
 654:	08 95       	ret

00000656 <EEPROM_vWriteBlock>:

void EEPROM_vWriteBlock(const u16 copy_u16Address,u8 copy_u8Data){}
 656:	08 95       	ret

00000658 <EEPROM_u8Read>:

u8 EEPROM_u8Read(const u16 copy_u16Address)
{
	/*Setup Address Register*/
	EEAR = copy_u16Address;
 658:	9f bb       	out	0x1f, r25	; 31
 65a:	8e bb       	out	0x1e, r24	; 30
	
	/*Start EEPROM Read*/
	SET_BIT(EECR,EERE);
 65c:	e0 9a       	sbi	0x1c, 0	; 28
	
	/*Return Data From Data Register*/
	return EEDR;
 65e:	8d b3       	in	r24, 0x1d	; 29
 660:	08 95       	ret

00000662 <KEYPAD_vInit>:
#define KEYPAD_PROG_H_
#include "KEYPAD_interface.h"

void KEYPAD_vInit(void)
{
	DIO_vSetLowNibbleDirection(KEYPAD_USED_PORT,DIO_u8_PIN_OUTPUT);
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	0e 94 ee 02 	call	0x5dc	; 0x5dc <DIO_vSetLowNibbleDirection>
	DIO_vSetHighNibbleDirection(KEYPAD_USED_PORT,DIO_u8_PIN_INPUT);
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	0e 94 08 03 	call	0x610	; 0x610 <DIO_vSetHighNibbleDirection>
    DIO_vSetHighNibblePullUpEnable(KEYPAD_USED_PORT,DIO_u8_PIN_ENABLE);
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	0e 94 87 02 	call	0x50e	; 0x50e <DIO_vSetHighNibblePullUpEnable>
}
 67a:	08 95       	ret

0000067c <KEYPAD_u8checkPress>:

u8 KEYPAD_u8checkPress(void)
{
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	60 97       	sbiw	r28, 0x10	; 16
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 694:	de 01       	movw	r26, r28
 696:	11 96       	adiw	r26, 0x01	; 1
 698:	e0 e6       	ldi	r30, 0x60	; 96
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	80 e1       	ldi	r24, 0x10	; 16
 69e:	01 90       	ld	r0, Z+
 6a0:	0d 92       	st	X+, r0
 6a2:	81 50       	subi	r24, 0x01	; 1
 6a4:	e1 f7       	brne	.-8      	; 0x69e <KEYPAD_u8checkPress+0x22>
	
	u8 row,col,buttonRead;
	u8 returnVal = NOT_PRESSED;
	
	for(row=0 ;row<4;row++)
 6a6:	00 e0       	ldi	r16, 0x00	; 0
	{
		
		DIO_vSetLowNibbleValue(KEYPAD_USED_PORT,0x0f);
 6a8:	83 e0       	ldi	r24, 0x03	; 3
 6aa:	6f e0       	ldi	r22, 0x0F	; 15
 6ac:	0e 94 a1 02 	call	0x542	; 0x542 <DIO_vSetLowNibbleValue>
		DIO_vSetPinValue(KEYPAD_USED_PORT,row,DIO_u8_PIN_LOW);
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	60 2f       	mov	r22, r16
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
		
		for ( col=0 ;col<4;col++)
 6ba:	10 e0       	ldi	r17, 0x00	; 0
		{
			buttonRead = DIO_u8GetPinValue(KEYPAD_USED_PORT,(col+4));
 6bc:	61 2f       	mov	r22, r17
 6be:	6c 5f       	subi	r22, 0xFC	; 252
 6c0:	83 e0       	ldi	r24, 0x03	; 3
 6c2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_u8GetPinValue>
			if(buttonRead==0)
 6c6:	88 23       	and	r24, r24
 6c8:	61 f4       	brne	.+24     	; 0x6e2 <KEYPAD_u8checkPress+0x66>
			{
				returnVal = arr[row][col];
 6ca:	e0 2f       	mov	r30, r16
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	e1 0f       	add	r30, r17
 6d8:	f1 1d       	adc	r31, r1
 6da:	ec 0f       	add	r30, r28
 6dc:	fd 1f       	adc	r31, r29
 6de:	81 81       	ldd	r24, Z+1	; 0x01
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <KEYPAD_u8checkPress+0x6e>
	{
		
		DIO_vSetLowNibbleValue(KEYPAD_USED_PORT,0x0f);
		DIO_vSetPinValue(KEYPAD_USED_PORT,row,DIO_u8_PIN_LOW);
		
		for ( col=0 ;col<4;col++)
 6e2:	1f 5f       	subi	r17, 0xFF	; 255
 6e4:	14 30       	cpi	r17, 0x04	; 4
 6e6:	51 f7       	brne	.-44     	; 0x6bc <KEYPAD_u8checkPress+0x40>
 6e8:	0b c0       	rjmp	.+22     	; 0x700 <KEYPAD_u8checkPress+0x84>
		}
		if(buttonRead==0)
			break;
	    }
	return returnVal;
}
 6ea:	60 96       	adiw	r28, 0x10	; 16
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	08 95       	ret
	u8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	
	u8 row,col,buttonRead;
	u8 returnVal = NOT_PRESSED;
	
	for(row=0 ;row<4;row++)
 700:	0f 5f       	subi	r16, 0xFF	; 255
 702:	04 30       	cpi	r16, 0x04	; 4
 704:	89 f6       	brne	.-94     	; 0x6a8 <KEYPAD_u8checkPress+0x2c>
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	f0 cf       	rjmp	.-32     	; 0x6ea <KEYPAD_u8checkPress+0x6e>

0000070a <LCD_vSendEnablePulse>:

#include "LCD_interface.h"

static void LCD_vSendEnablePulse(void)
{
	DIO_vSetPinValue(LCD_CONTROL_USED_PORT,EN,DIO_u8_PIN_HIGH);
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 714:	83 ef       	ldi	r24, 0xF3	; 243
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	01 97       	sbiw	r24, 0x01	; 1
 71a:	f1 f7       	brne	.-4      	; 0x718 <LCD_vSendEnablePulse+0xe>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <LCD_vSendEnablePulse+0x14>
 71e:	00 00       	nop
	_delay_ms(2);
	DIO_vSetPinValue(LCD_CONTROL_USED_PORT,EN,DIO_u8_PIN_LOW);
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
 72a:	83 ef       	ldi	r24, 0xF3	; 243
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <LCD_vSendEnablePulse+0x24>
 732:	00 c0       	rjmp	.+0      	; 0x734 <LCD_vSendEnablePulse+0x2a>
 734:	00 00       	nop
	_delay_ms(2);
}
 736:	08 95       	ret

00000738 <LCD_vSendChar>:

void LCD_vSendChar(u8 copy_u8Data)
{
 738:	68 2f       	mov	r22, r24
	
	#if(configFOUR_BIT_MODE==0)
	{
	DIO_vSetPortValue(LCD_DATA_USED_PORT,copy_u8Data);
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_vSetPortValue>
	DIO_vSetPinValue(LCD_CONTROL_USED_PORT,RS,DIO_u8_PIN_HIGH);
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	41 e0       	ldi	r20, 0x01	; 1
 746:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	LCD_vSendEnablePulse();
 74a:	0e 94 85 03 	call	0x70a	; 0x70a <LCD_vSendEnablePulse>
 74e:	89 ef       	ldi	r24, 0xF9	; 249
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	01 97       	sbiw	r24, 0x01	; 1
 754:	f1 f7       	brne	.-4      	; 0x752 <LCD_vSendChar+0x1a>
 756:	00 c0       	rjmp	.+0      	; 0x758 <LCD_vSendChar+0x20>
 758:	00 00       	nop
	DIO_vSetPinValue(LCD_CONTROL_USED_PORT,RS,DIO_u8_PIN_HIGH);
	LCD_vSendEnablePulse();
	}
	#endif
	_delay_ms(1);
}
 75a:	08 95       	ret

0000075c <LCD_vSendCmd>:

void LCD_vSendCmd(u8 copy_u8Cmd)
{
 75c:	68 2f       	mov	r22, r24
	
	#if(configFOUR_BIT_MODE==0)
	
		DIO_vSetPortValue(LCD_DATA_USED_PORT,copy_u8Cmd);
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_vSetPortValue>
		DIO_vSetPinValue(LCD_CONTROL_USED_PORT,RS,DIO_u8_PIN_LOW);
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
		LCD_vSendEnablePulse();
 76e:	0e 94 85 03 	call	0x70a	; 0x70a <LCD_vSendEnablePulse>
 772:	89 ef       	ldi	r24, 0xF9	; 249
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	f1 f7       	brne	.-4      	; 0x776 <LCD_vSendCmd+0x1a>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <LCD_vSendCmd+0x20>
 77c:	00 00       	nop
 77e:	89 ef       	ldi	r24, 0xF9	; 249
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <LCD_vSendCmd+0x26>
 786:	00 c0       	rjmp	.+0      	; 0x788 <LCD_vSendCmd+0x2c>
 788:	00 00       	nop
		DIO_vSetPinValue(LCD_CONTROL_USED_PORT,RS,DIO_u8_PIN_LOW);
		LCD_vSendEnablePulse();
		
	#endif
	_delay_ms(1);
}	
 78a:	08 95       	ret

0000078c <LCD_vInit>:
 78c:	87 ea       	ldi	r24, 0xA7	; 167
 78e:	91 e6       	ldi	r25, 0x61	; 97
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <LCD_vInit+0x4>
 794:	00 c0       	rjmp	.+0      	; 0x796 <LCD_vInit+0xa>
 796:	00 00       	nop
void LCD_vInit()
{
	_delay_ms(100);	
										  //wait for vdd rises to 4.5v.
	#if (configFOUR_BIT_MODE ==0)                                            
	DIO_vSetPortDirection(LCD_DATA_USED_PORT,0xff);						 /* set PORT output */
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	6f ef       	ldi	r22, 0xFF	; 255
 79c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vSetPortDirection>
	DIO_vSetPinDirection(LCD_CONTROL_USED_PORT,EN,DIO_u8_PIN_OUTPUT);   
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_CONTROL_USED_PORT,RS,DIO_u8_PIN_OUTPUT);
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	61 e0       	ldi	r22, 0x01	; 1
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	DIO_vSetPinDirection(LCD_CONTROL_USED_PORT,RW,DIO_u8_PIN_OUTPUT);
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	62 e0       	ldi	r22, 0x02	; 2
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_vSetPinDirection>
	
	DIO_vSetPinValue(LCD_CONTROL_USED_PORT,RW,DIO_u8_PIN_LOW);  // Set as write pin 
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	62 e0       	ldi	r22, 0x02	; 2
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_vSetPinValue>
	
	LCD_vSendCmd(EIGHT_BITS);   // 8_bit mode
 7c8:	88 e3       	ldi	r24, 0x38	; 56
 7ca:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vSendCmd>
 7ce:	89 ef       	ldi	r24, 0xF9	; 249
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <LCD_vInit+0x46>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <LCD_vInit+0x4c>
 7d8:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCmd(CURSOR_MODE);   // 8_bit mode
 7da:	8c e0       	ldi	r24, 0x0C	; 12
 7dc:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vSendCmd>
 7e0:	89 ef       	ldi	r24, 0xF9	; 249
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	f1 f7       	brne	.-4      	; 0x7e4 <LCD_vInit+0x58>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <LCD_vInit+0x5e>
 7ea:	00 00       	nop
	_delay_ms(1);
	LCD_vSendCmd(CLR_SCREEN);   // clear screen
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vSendCmd>
 7f2:	83 ec       	ldi	r24, 0xC3	; 195
 7f4:	99 e0       	ldi	r25, 0x09	; 9
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <LCD_vInit+0x6a>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <LCD_vInit+0x70>
 7fc:	00 00       	nop
	_delay_ms(10);
	LCD_vSendCmd(ENTRY_MODE);   // shift cursor to right
 7fe:	86 e0       	ldi	r24, 0x06	; 6
 800:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vSendCmd>
 804:	89 ef       	ldi	r24, 0xF9	; 249
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <LCD_vInit+0x7c>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <LCD_vInit+0x82>
 80e:	00 00       	nop
	LCD_vSendCmd(CLR_SCREEN);   // clear screen
	_delay_ms(10);
	LCD_vSendCmd(ENTRY_MODE);   // shift cursor to right
	_delay_ms(1);
	#endif
}
 810:	08 95       	ret

00000812 <LCD_vMoveCursor>:

void LCD_vMoveCursor(u8 copy_u8Row,u8 copy_u8Coloumn)
{
	u8 data ;
	if(copy_u8Row>2||copy_u8Row<1||copy_u8Coloumn>16||copy_u8Coloumn<1)
 812:	28 2f       	mov	r18, r24
 814:	21 50       	subi	r18, 0x01	; 1
 816:	22 30       	cpi	r18, 0x02	; 2
 818:	70 f4       	brcc	.+28     	; 0x836 <LCD_vMoveCursor+0x24>
 81a:	61 31       	cpi	r22, 0x11	; 17
 81c:	70 f4       	brcc	.+28     	; 0x83a <LCD_vMoveCursor+0x28>
 81e:	66 23       	and	r22, r22
 820:	71 f0       	breq	.+28     	; 0x83e <LCD_vMoveCursor+0x2c>
	{
		data=0x80;
	}
	else if(copy_u8Row==1)
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	19 f4       	brne	.+6      	; 0x82c <LCD_vMoveCursor+0x1a>
	{
		data=0x80+copy_u8Coloumn-1 ;
 826:	96 2f       	mov	r25, r22
 828:	91 58       	subi	r25, 0x81	; 129
 82a:	0a c0       	rjmp	.+20     	; 0x840 <LCD_vMoveCursor+0x2e>
	}
	else if (copy_u8Row==2)
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	41 f4       	brne	.+16     	; 0x840 <LCD_vMoveCursor+0x2e>
	{
		data=0xc0+copy_u8Coloumn-1;
 830:	96 2f       	mov	r25, r22
 832:	91 54       	subi	r25, 0x41	; 65
 834:	05 c0       	rjmp	.+10     	; 0x840 <LCD_vMoveCursor+0x2e>
void LCD_vMoveCursor(u8 copy_u8Row,u8 copy_u8Coloumn)
{
	u8 data ;
	if(copy_u8Row>2||copy_u8Row<1||copy_u8Coloumn>16||copy_u8Coloumn<1)
	{
		data=0x80;
 836:	90 e8       	ldi	r25, 0x80	; 128
 838:	03 c0       	rjmp	.+6      	; 0x840 <LCD_vMoveCursor+0x2e>
 83a:	90 e8       	ldi	r25, 0x80	; 128
 83c:	01 c0       	rjmp	.+2      	; 0x840 <LCD_vMoveCursor+0x2e>
 83e:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (copy_u8Row==2)
	{
		data=0xc0+copy_u8Coloumn-1;
	}
	LCD_vSendCmd(data);
 840:	89 2f       	mov	r24, r25
 842:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vSendCmd>
 846:	89 ef       	ldi	r24, 0xF9	; 249
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	01 97       	sbiw	r24, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <LCD_vMoveCursor+0x38>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <LCD_vMoveCursor+0x3e>
 850:	00 00       	nop
	_delay_ms(1);

}
 852:	08 95       	ret

00000854 <LCD_vClearScreen>:
	_delay_ms(1);
}	

void LCD_vClearScreen()
{
	LCD_vSendCmd(CLR_SCREEN);
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_vSendCmd>
	LCD_vMoveCursor(1,1);
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	61 e0       	ldi	r22, 0x01	; 1
 85e:	0e 94 09 04 	call	0x812	; 0x812 <LCD_vMoveCursor>
	
}
 862:	08 95       	ret

00000864 <LCD_vSendString>:
	LCD_vSendCmd(data);
	_delay_ms(1);

}
void LCD_vSendString(u8 *copy_u8data)
{
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	ec 01       	movw	r28, r24
	while((*copy_u8data)!='\0')
 86a:	88 81       	ld	r24, Y
 86c:	88 23       	and	r24, r24
 86e:	31 f0       	breq	.+12     	; 0x87c <LCD_vSendString+0x18>
	}
	LCD_vSendCmd(data);
	_delay_ms(1);

}
void LCD_vSendString(u8 *copy_u8data)
 870:	21 96       	adiw	r28, 0x01	; 1
{
	while((*copy_u8data)!='\0')
	{
		LCD_vSendChar(*copy_u8data);
 872:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_vSendChar>
	_delay_ms(1);

}
void LCD_vSendString(u8 *copy_u8data)
{
	while((*copy_u8data)!='\0')
 876:	89 91       	ld	r24, Y+
 878:	88 23       	and	r24, r24
 87a:	d9 f7       	brne	.-10     	; 0x872 <LCD_vSendString+0xe>
	{
		LCD_vSendChar(*copy_u8data);
		copy_u8data++;
	}
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <main>:
#define EEPROM_PASS_LOCATION4	  0x24
#define MAX_TRIES 4

u8 arr[4];
int main(void)
{
 882:	2f 92       	push	r2
 884:	3f 92       	push	r3
 886:	4f 92       	push	r4
 888:	5f 92       	push	r5
 88a:	6f 92       	push	r6
 88c:	7f 92       	push	r7
 88e:	8f 92       	push	r8
 890:	9f 92       	push	r9
 892:	af 92       	push	r10
 894:	bf 92       	push	r11
 896:	cf 92       	push	r12
 898:	df 92       	push	r13
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
	u8 LOC_u8Value = NOT_PRESSED;
	u8 LOC_u8CheckFlag=0,i;
	u8 LOC_u8Tries = MAX_TRIES;
	
	LCD_vInit();
 8a6:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_vInit>
	KEYPAD_vInit();
 8aa:	0e 94 31 03 	call	0x662	; 0x662 <KEYPAD_vInit>
	
    
    
		if(EEPROM_u8Read(EEPROM_STATUS_LOCATION)==NOT_PRESSED)
 8ae:	80 e2       	ldi	r24, 0x20	; 32
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 2c 03 	call	0x658	; 0x658 <EEPROM_u8Read>
 8b6:	8f 3f       	cpi	r24, 0xFF	; 255
 8b8:	a1 f5       	brne	.+104    	; 0x922 <main+0xa0>
		{
		LCD_vSendString("Set Pass:");
 8ba:	80 e7       	ldi	r24, 0x70	; 112
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
 8c2:	c1 e2       	ldi	r28, 0x21	; 33
 8c4:	d0 e0       	ldi	r29, 0x00	; 0
		for( i=0;i<4;i++)
		{
			do 
			{
				LOC_u8Value = KEYPAD_u8checkPress();
 8c6:	0e 94 3e 03 	call	0x67c	; 0x67c <KEYPAD_u8checkPress>
 8ca:	18 2f       	mov	r17, r24
			} while (LOC_u8Value == NOT_PRESSED);
 8cc:	8f 3f       	cpi	r24, 0xFF	; 255
 8ce:	d9 f3       	breq	.-10     	; 0x8c6 <main+0x44>
			LCD_vSendChar(LOC_u8Value);
 8d0:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_vSendChar>
 8d4:	8f ef       	ldi	r24, 0xFF	; 255
 8d6:	92 e5       	ldi	r25, 0x52	; 82
 8d8:	a7 e0       	ldi	r26, 0x07	; 7
 8da:	81 50       	subi	r24, 0x01	; 1
 8dc:	90 40       	sbci	r25, 0x00	; 0
 8de:	a0 40       	sbci	r26, 0x00	; 0
 8e0:	e1 f7       	brne	.-8      	; 0x8da <main+0x58>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <main+0x62>
 8e4:	00 00       	nop
#define EEPROM_PASS_LOCATION3     0x23
#define EEPROM_PASS_LOCATION4	  0x24
#define MAX_TRIES 4

u8 arr[4];
int main(void)
 8e6:	6c 2f       	mov	r22, r28
 8e8:	67 51       	subi	r22, 0x17	; 23
			{
				LOC_u8Value = KEYPAD_u8checkPress();
			} while (LOC_u8Value == NOT_PRESSED);
			LCD_vSendChar(LOC_u8Value);
			_delay_ms(300);
			LCD_vMoveCursor(1,10+i);
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	0e 94 09 04 	call	0x812	; 0x812 <LCD_vMoveCursor>
			LCD_vSendChar('*');
 8f0:	8a e2       	ldi	r24, 0x2A	; 42
 8f2:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_vSendChar>
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	90 e7       	ldi	r25, 0x70	; 112
 8fa:	a2 e0       	ldi	r26, 0x02	; 2
 8fc:	81 50       	subi	r24, 0x01	; 1
 8fe:	90 40       	sbci	r25, 0x00	; 0
 900:	a0 40       	sbci	r26, 0x00	; 0
 902:	e1 f7       	brne	.-8      	; 0x8fc <main+0x7a>
 904:	00 c0       	rjmp	.+0      	; 0x906 <main+0x84>
 906:	00 00       	nop
			_delay_ms(100);
			EEPROM_vWrite(EEPROM_PASS_LOCATION1+i,LOC_u8Value);
 908:	ce 01       	movw	r24, r28
 90a:	61 2f       	mov	r22, r17
 90c:	0e 94 22 03 	call	0x644	; 0x644 <EEPROM_vWrite>
 910:	21 96       	adiw	r28, 0x01	; 1
    
    
		if(EEPROM_u8Read(EEPROM_STATUS_LOCATION)==NOT_PRESSED)
		{
		LCD_vSendString("Set Pass:");
		for( i=0;i<4;i++)
 912:	c5 32       	cpi	r28, 0x25	; 37
 914:	d1 05       	cpc	r29, r1
 916:	b9 f6       	brne	.-82     	; 0x8c6 <main+0x44>
			LCD_vMoveCursor(1,10+i);
			LCD_vSendChar('*');
			_delay_ms(100);
			EEPROM_vWrite(EEPROM_PASS_LOCATION1+i,LOC_u8Value);
			}		
        EEPROM_vWrite(EEPROM_STATUS_LOCATION,0x00);
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	0e 94 22 03 	call	0x644	; 0x644 <EEPROM_vWrite>
	
    
    
		if(EEPROM_u8Read(EEPROM_STATUS_LOCATION)==NOT_PRESSED)
		{
		LCD_vSendString("Set Pass:");
 922:	0f 2e       	mov	r0, r31
 924:	f3 e3       	ldi	r31, 0x33	; 51
 926:	ff 2e       	mov	r15, r31
 928:	f0 2d       	mov	r31, r0
			}		
        EEPROM_vWrite(EEPROM_STATUS_LOCATION,0x00);
		  }	
		while(LOC_u8CheckFlag==0)
		{
			arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
 92a:	0f 2e       	mov	r0, r31
 92c:	fb ec       	ldi	r31, 0xCB	; 203
 92e:	cf 2e       	mov	r12, r31
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	df 2e       	mov	r13, r31
 934:	f0 2d       	mov	r31, r0
 936:	0f ef       	ldi	r16, 0xFF	; 255
 938:	46 01       	movw	r8, r12
 93a:	08 94       	sec
 93c:	81 08       	sbc	r8, r1
 93e:	91 08       	sbc	r9, r1
 940:	0f 2e       	mov	r0, r31
 942:	fe ef       	ldi	r31, 0xFE	; 254
 944:	4f 2e       	mov	r4, r31
 946:	ff ef       	ldi	r31, 0xFF	; 255
 948:	5f 2e       	mov	r5, r31
 94a:	f0 2d       	mov	r31, r0
 94c:	4c 0c       	add	r4, r12
 94e:	5d 1c       	adc	r5, r13
 950:	0f 2e       	mov	r0, r31
 952:	fd ef       	ldi	r31, 0xFD	; 253
 954:	af 2e       	mov	r10, r31
 956:	ff ef       	ldi	r31, 0xFF	; 255
 958:	bf 2e       	mov	r11, r31
 95a:	f0 2d       	mov	r31, r0
 95c:	ac 0c       	add	r10, r12
 95e:	bd 1c       	adc	r11, r13
			LCD_vClearScreen();
			LCD_vSendString("check pass:");
 960:	0f 2e       	mov	r0, r31
 962:	fa e7       	ldi	r31, 0x7A	; 122
 964:	2f 2e       	mov	r2, r31
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	3f 2e       	mov	r3, r31
 96a:	f0 2d       	mov	r31, r0
 96c:	ea 2c       	mov	r14, r10
 96e:	7b 2c       	mov	r7, r11
 970:	0f 2e       	mov	r0, r31
 972:	fc e0       	ldi	r31, 0x0C	; 12
 974:	6f 2e       	mov	r6, r31
 976:	f0 2d       	mov	r31, r0
			}		
        EEPROM_vWrite(EEPROM_STATUS_LOCATION,0x00);
		  }	
		while(LOC_u8CheckFlag==0)
		{
			arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
 978:	d6 01       	movw	r26, r12
 97a:	0c 93       	st	X, r16
 97c:	f4 01       	movw	r30, r8
 97e:	00 83       	st	Z, r16
 980:	d2 01       	movw	r26, r4
 982:	0c 93       	st	X, r16
 984:	f5 01       	movw	r30, r10
 986:	00 83       	st	Z, r16
			LCD_vClearScreen();
 988:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_vClearScreen>
			LCD_vSendString("check pass:");
 98c:	c1 01       	movw	r24, r2
 98e:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
 992:	ce 2d       	mov	r28, r14
 994:	d7 2d       	mov	r29, r7
 996:	16 2d       	mov	r17, r6
			for (i=0;i<=3;i++)
			{
				do
				{
					arr[i]=KEYPAD_u8checkPress();
 998:	0e 94 3e 03 	call	0x67c	; 0x67c <KEYPAD_u8checkPress>
 99c:	88 83       	st	Y, r24
				}while (arr[i]==NOT_PRESSED);
 99e:	8f 3f       	cpi	r24, 0xFF	; 255
 9a0:	d9 f3       	breq	.-10     	; 0x998 <main+0x116>
				LCD_vSendChar(arr[i]);
 9a2:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_vSendChar>
 9a6:	8f e7       	ldi	r24, 0x7F	; 127
 9a8:	9a e1       	ldi	r25, 0x1A	; 26
 9aa:	a6 e0       	ldi	r26, 0x06	; 6
 9ac:	81 50       	subi	r24, 0x01	; 1
 9ae:	90 40       	sbci	r25, 0x00	; 0
 9b0:	a0 40       	sbci	r26, 0x00	; 0
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <main+0x12a>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <main+0x134>
 9b6:	00 00       	nop
				_delay_ms(250);
				LCD_vMoveCursor(1,12+i);
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	61 2f       	mov	r22, r17
 9bc:	0e 94 09 04 	call	0x812	; 0x812 <LCD_vMoveCursor>
				LCD_vSendChar('*');
 9c0:	8a e2       	ldi	r24, 0x2A	; 42
 9c2:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_vSendChar>
 9c6:	1f 5f       	subi	r17, 0xFF	; 255
 9c8:	21 96       	adiw	r28, 0x01	; 1
		while(LOC_u8CheckFlag==0)
		{
			arr[0]=arr[1]=arr[2]=arr[3]=NOT_PRESSED;
			LCD_vClearScreen();
			LCD_vSendString("check pass:");
			for (i=0;i<=3;i++)
 9ca:	10 31       	cpi	r17, 0x10	; 16
 9cc:	29 f7       	brne	.-54     	; 0x998 <main+0x116>
				_delay_ms(250);
				LCD_vMoveCursor(1,12+i);
				LCD_vSendChar('*');
			}
			
			if(EEPROM_u8Read(EEPROM_PASS_LOCATION1)==arr[0] &&  EEPROM_u8Read(EEPROM_PASS_LOCATION2)==arr[1] && EEPROM_u8Read(EEPROM_PASS_LOCATION3)==arr[2] && EEPROM_u8Read(EEPROM_PASS_LOCATION4)==arr[3])
 9ce:	81 e2       	ldi	r24, 0x21	; 33
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 2c 03 	call	0x658	; 0x658 <EEPROM_u8Read>
 9d6:	a8 ec       	ldi	r26, 0xC8	; 200
 9d8:	b0 e0       	ldi	r27, 0x00	; 0
 9da:	9c 91       	ld	r25, X
 9dc:	89 17       	cp	r24, r25
 9de:	49 f5       	brne	.+82     	; 0xa32 <main+0x1b0>
 9e0:	82 e2       	ldi	r24, 0x22	; 34
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 2c 03 	call	0x658	; 0x658 <EEPROM_u8Read>
 9e8:	e9 ec       	ldi	r30, 0xC9	; 201
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	90 81       	ld	r25, Z
 9ee:	89 17       	cp	r24, r25
 9f0:	01 f5       	brne	.+64     	; 0xa32 <main+0x1b0>
 9f2:	83 e2       	ldi	r24, 0x23	; 35
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 2c 03 	call	0x658	; 0x658 <EEPROM_u8Read>
 9fa:	aa ec       	ldi	r26, 0xCA	; 202
 9fc:	b0 e0       	ldi	r27, 0x00	; 0
 9fe:	9c 91       	ld	r25, X
 a00:	89 17       	cp	r24, r25
 a02:	b9 f4       	brne	.+46     	; 0xa32 <main+0x1b0>
 a04:	84 e2       	ldi	r24, 0x24	; 36
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 2c 03 	call	0x658	; 0x658 <EEPROM_u8Read>
 a0c:	f6 01       	movw	r30, r12
 a0e:	90 81       	ld	r25, Z
 a10:	89 17       	cp	r24, r25
 a12:	79 f4       	brne	.+30     	; 0xa32 <main+0x1b0>
			{
				LCD_vClearScreen();
 a14:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_vClearScreen>
				LCD_vSendString("right password");
 a18:	86 e8       	ldi	r24, 0x86	; 134
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
				LCD_vMoveCursor(2,1);
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	61 e0       	ldi	r22, 0x01	; 1
 a24:	0e 94 09 04 	call	0x812	; 0x812 <LCD_vMoveCursor>
				LCD_vSendString("safe opened");
 a28:	85 e9       	ldi	r24, 0x95	; 149
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
				LOC_u8CheckFlag=1;
 a30:	38 c0       	rjmp	.+112    	; 0xaa2 <main+0x220>
			}
			else
			{
				LOC_u8Tries=LOC_u8Tries-1;
				if (LOC_u8Tries>0)
 a32:	f0 e3       	ldi	r31, 0x30	; 48
 a34:	ff 16       	cp	r15, r31
 a36:	19 f1       	breq	.+70     	; 0xa7e <main+0x1fc>
				{
					LCD_vClearScreen();
 a38:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_vClearScreen>
					LCD_vSendString("wrong password");
 a3c:	81 ea       	ldi	r24, 0xA1	; 161
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
 a44:	8f ef       	ldi	r24, 0xFF	; 255
 a46:	99 e6       	ldi	r25, 0x69	; 105
 a48:	a8 e1       	ldi	r26, 0x18	; 24
 a4a:	81 50       	subi	r24, 0x01	; 1
 a4c:	90 40       	sbci	r25, 0x00	; 0
 a4e:	a0 40       	sbci	r26, 0x00	; 0
 a50:	e1 f7       	brne	.-8      	; 0xa4a <main+0x1c8>
 a52:	00 c0       	rjmp	.+0      	; 0xa54 <main+0x1d2>
 a54:	00 00       	nop
					_delay_ms(1000);
					LCD_vClearScreen();
 a56:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_vClearScreen>
					LCD_vSendString("tries left:");
 a5a:	80 eb       	ldi	r24, 0xB0	; 176
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
					LCD_vSendChar(LOC_u8Tries+48);
 a62:	8f 2d       	mov	r24, r15
 a64:	0e 94 9c 03 	call	0x738	; 0x738 <LCD_vSendChar>
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	99 e6       	ldi	r25, 0x69	; 105
 a6c:	a8 e1       	ldi	r26, 0x18	; 24
 a6e:	81 50       	subi	r24, 0x01	; 1
 a70:	90 40       	sbci	r25, 0x00	; 0
 a72:	a0 40       	sbci	r26, 0x00	; 0
 a74:	e1 f7       	brne	.-8      	; 0xa6e <main+0x1ec>
 a76:	00 c0       	rjmp	.+0      	; 0xa78 <main+0x1f6>
 a78:	00 00       	nop
 a7a:	fa 94       	dec	r15
 a7c:	7d cf       	rjmp	.-262    	; 0x978 <main+0xf6>
					_delay_ms(1000);
					
				}
				else
				{
					LCD_vClearScreen();
 a7e:	0e 94 2a 04 	call	0x854	; 0x854 <LCD_vClearScreen>
					LCD_vMoveCursor(1,1);
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	61 e0       	ldi	r22, 0x01	; 1
 a86:	0e 94 09 04 	call	0x812	; 0x812 <LCD_vMoveCursor>
					LCD_vSendString("wrong password");
 a8a:	81 ea       	ldi	r24, 0xA1	; 161
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
					LCD_vMoveCursor(2,1);
 a92:	82 e0       	ldi	r24, 0x02	; 2
 a94:	61 e0       	ldi	r22, 0x01	; 1
 a96:	0e 94 09 04 	call	0x812	; 0x812 <LCD_vMoveCursor>
					LCD_vSendString("safe closed");
 a9a:	8c eb       	ldi	r24, 0xBC	; 188
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 32 04 	call	0x864	; 0x864 <LCD_vSendString>
					LOC_u8CheckFlag=1;
				}
			}
			}    
			
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	df 91       	pop	r29
 aa8:	cf 91       	pop	r28
 aaa:	1f 91       	pop	r17
 aac:	0f 91       	pop	r16
 aae:	ff 90       	pop	r15
 ab0:	ef 90       	pop	r14
 ab2:	df 90       	pop	r13
 ab4:	cf 90       	pop	r12
 ab6:	bf 90       	pop	r11
 ab8:	af 90       	pop	r10
 aba:	9f 90       	pop	r9
 abc:	8f 90       	pop	r8
 abe:	7f 90       	pop	r7
 ac0:	6f 90       	pop	r6
 ac2:	5f 90       	pop	r5
 ac4:	4f 90       	pop	r4
 ac6:	3f 90       	pop	r3
 ac8:	2f 90       	pop	r2
 aca:	08 95       	ret

00000acc <_exit>:
 acc:	f8 94       	cli

00000ace <__stop_program>:
 ace:	ff cf       	rjmp	.-2      	; 0xace <__stop_program>
